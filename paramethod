#!/usr/bin/env perl
use 5.016;
use warnings;

use Getopt::Long qw( :config gnu_getopt );
use My::Tasks::ExecutorCache;
use My::Tasks::ExecutorProgress;
use My::Tasks::Scheduler;
use My::DnsRequests::BgExecutor;
use My::DnsRequests::ExecutorDiagnostics;
use My::DnsRequests::ExecutorFilter;
use My::DnsRequests::FgExecutor;
use My::TestMethods::MethodsV2 qw(
  get_parent_ns_ips
  get_delegation
  get_del_ns_names_and_ips
  get_del_ns_names
  get_del_ns_ips
  get_zone_ns_names
  get_ib_addr_in_zone
  get_zone_ns_names_and_ips
  get_zone_ns_ips
);
use Pod::Usage;
use Readonly;
use Time::HiRes qw( time );

my $opt_help         = 0;
my $opt_verbose      = 0;
my $opt_ipv4         = 1;
my $opt_ipv6         = 1;
my $opt_strategy     = 'bg';
my $opt_timeout      = 5;
my $opt_list_methods = 0;

my $begin_time;

sub output {

    my ( $format, @args ) = @_;

    if ( $opt_verbose ) {
        printf "%8.2fs  $format\n", time() - $begin_time, @args;
    }
    else {
        printf "$format\n", @args;
    }

    return;
}

sub output_fields {
    my @fields = @_;

    output( "%s", join '  ', @fields );

    return;
}

Readonly my %ROOT_NAME_SERVERS => (
    'a.root-servers.net.' => [ '198.41.0.4',     '2001:503:ba3e::2:30' ],
    'b.root-servers.net.' => [ '170.247.170.2',  '2801:1b8:10::b' ],
    'c.root-servers.net.' => [ '192.33.4.12',    '2001:500:2::c' ],
    'd.root-servers.net.' => [ '199.7.91.13',    '2001:500:2d::d' ],
    'e.root-servers.net.' => [ '192.203.230.10', '2001:500:a8::e' ],
    'f.root-servers.net.' => [ '192.5.5.241',    '2001:500:2f::f' ],
    'g.root-servers.net.' => [ '192.112.36.4',   '2001:500:12::d0d' ],
    'h.root-servers.net.' => [ '198.97.190.53',  '2001:500:1::53' ],
    'i.root-servers.net.' => [ '192.36.148.17',  '2001:7fe::53' ],
    'j.root-servers.net.' => [ '192.58.128.30',  '2001:503:c27::2:30' ],
    'k.root-servers.net.' => [ '193.0.14.129',   '2001:7fd::1' ],
    'l.root-servers.net.' => [ '199.7.83.42',    '2001:500:9f::42' ],
    'm.root-servers.net.' => [ '202.12.27.33',   '2001:dc3::35' ],
);

Readonly my %METHOD_PRODUCERS => (
    'get-parent-ns-ips' => sub {
        my ( $domain ) = @_;
        return get_parent_ns_ips( $domain, \%ROOT_NAME_SERVERS, 0 );
    },
    'get-delegation' => sub {
        my ( $domain ) = @_;
        return get_delegation( $domain, \%ROOT_NAME_SERVERS, {} );
    },
    'get-del-ns-names-and-ips' => sub {
        my ( $domain ) = @_;
        return get_del_ns_names_and_ips( $domain, \%ROOT_NAME_SERVERS, {} );
    },
    'get-del-ns-names' => sub {
        my ( $domain ) = @_;
        return get_del_ns_names( $domain, \%ROOT_NAME_SERVERS, {} );
    },
    'get-del-ns-ips' => sub {
        my ( $domain ) = @_;
        return get_del_ns_ips( $domain, \%ROOT_NAME_SERVERS, {} );
    },
    'get-zone-ns-names' => sub {
        my ( $domain ) = @_;
        return get_zone_ns_names( $domain, \%ROOT_NAME_SERVERS, {} );
    },
    'get-ib-addr-in-zone' => sub {
        my ( $domain ) = @_;
        return get_ib_addr_in_zone( $domain, \%ROOT_NAME_SERVERS, {} );
    },
    'get-zone-ns-names-and-ips' => sub {
        my ( $domain ) = @_;
        return get_zone_ns_names_and_ips( $domain, \%ROOT_NAME_SERVERS, {} );
    },
    'get-zone-ns-ips' => sub {
        my ( $domain ) = @_;
        return get_zone_ns_ips( $domain, \%ROOT_NAME_SERVERS, {} );
    },
);

GetOptions(
    'help|h'       => \$opt_help,
    'list-methods' => \$opt_list_methods,
    'ipv4!'        => \$opt_ipv4,
    'ipv6!'        => \$opt_ipv6,
    'strategy|s=s' => \$opt_strategy,
    'timeout|t=i'  => \$opt_timeout,
    'verbose|v!'   => \$opt_verbose,
) or pod2usage( 2 );

pod2usage( 1 ) if $opt_help;

if ( $opt_list_methods ) {
    for my $method ( sort keys %METHOD_PRODUCERS ) {
        say $method;
    }

    exit 0;
}

if ( $opt_strategy !~ /^(bg|fg)$/ ) {
    pod2usage( "invalid --strategy argument" );
}

my $method = shift @ARGV // pod2usage( "METHOD not specified" );
my $domain = shift @ARGV // pod2usage( "DOMAIN not specified" );

if ( !exists $METHOD_PRODUCERS{$method} ) {
    pod2usage( "unrecognized METHOD" );
}

if ( @ARGV ) {
    pod2usage( "too many arguments" );
}

my $executor;
if ( $opt_strategy eq 'bg' ) {
    $executor = My::DnsRequests::BgExecutor->new( timeout => $opt_timeout );
}
else {
    $executor = My::DnsRequests::FgExecutor->new( timeout => $opt_timeout );
}

my $diag_stats;
if ( $opt_verbose ) {
    $executor = My::Tasks::ExecutorProgress->new( $executor );
    $executor = My::DnsRequests::ExecutorDiagnostics->new( $executor, \$diag_stats );
}

$executor = My::Tasks::ExecutorCache->new( $executor );

if ( !$opt_ipv4 || !$opt_ipv6 ) {
    $executor = My::DnsRequests::ExecutorFilter->new( $executor, ipv4 => $opt_ipv4, ipv6 => $opt_ipv6 );
}

my $scheduler = My::Tasks::Scheduler->new( $executor, \my $sched_stats );

$begin_time = time();
if ( $opt_verbose ) {
    output( "; starting" );
}

my $producer = $METHOD_PRODUCERS{$method}->( $domain );
$scheduler->flatmap( $producer, \&output_fields );

$scheduler->run;

if ( $opt_verbose ) {
    output( "; done ($diag_stats->{requests} requests, $sched_stats->{tasks} tasks)" );
}

exit 0;

=head1 SYNOPSIS

paramethod --help

    Show usage documentation.

paramethod --list-methods

    List supported methods of examination.

paramethod [OPTIONS] METHOD DOMAIN

    Examine a domain.

=head1 ARGUMENTS

=over 4

=item METHOD

The method of examination. List available methods with --list-methods.

=item DOMAIN

The domain to examine.

=back

=head1 OPTIONS

=over 4

=item --[no]ipv4

Enable/disable using IPv4.
Default: enabled

=item --[no]ipv6

Enable/disable using IPv6.
Default: enabled.

=item -s STRATEGY, --strategy=STRATEGY

Select DNS transaction strategy.
Default: bg

Valid values are C<bg> for concurrently starting multiple transactions, and C<fg> for
blocking to wait for each transaction.

=item -t SECONDS, --timeout SECONDS

Set DNS transaction timeout.
Default: 5

Must be a positive number.

=item -v, --verbose

Include timings, progress and diagnostics in the output.

Default: disabled

=back

=head1 CAVEATS

The current implementation has many notable deficiencies. Here is a non-exhaustive list.

=over 4

=item Blacklisting

Blacklisting is not currently implemented. This is not significant when using the C<bg>
command execution strategy since the timeouts are largely resolved concurrently.

=item Out-of-bailiwick nameserver address lookup

Instead of performing our own lookup of out-of-bailiwick nameserver addresses in a way
that respects root hints, the current implementation is cheating by simply asking Quad9 to
perform a recursive lookup for us.

=item Root hints

=item Fake delegation

=back

=cut
