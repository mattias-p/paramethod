#!/usr/bin/env perl
use 5.016;
use warnings;

use File::Slurp  qw( read_file write_file );
use Getopt::Long qw( :config gnu_getopt );
use My::DnsMethods::Zone;
use My::DnsRequest::BackgroundHandler;
use My::DnsRequest::ForegroundHandler;
use My::DnsRequest::HandlerDiagnostics;
use My::DnsRequest::HandlerFilter;
use My::DnsRequest::HandlerLogger;
use My::Streams::DieHandler;
use My::Streams::HandlerCache;
use My::Streams::HandlerProgress;
use Pod::Usage;
use Readonly;
use CBOR::XS    qw( encode_cbor decode_cbor );
use Time::HiRes qw( time );

my $opt_help         = 0;
my $opt_verbose      = 0;
my $opt_ipv4         = 1;
my $opt_ipv6         = 1;
my $opt_progress     = 0;
my $opt_save         = '';
my $opt_strategy     = 'bg';
my $opt_timeout      = 5;
my $opt_list_methods = 0;

my $begin_time;

sub output {

    my ( $format, @args ) = @_;

    my $clear = $opt_progress ? ' ' x ( 2 * 4 + 1 ) . "\r" : '';

    if ( $opt_verbose ) {
        printf "%s%6.2fs\t$format\n", $clear, time() - $begin_time, @args;
    }
    else {
        printf "%s$format\n", $clear, @args;
    }

    return;
}

sub output_fields {
    my @fields = @_;

    output( "%s", join "\t", @fields );

    return;
}

GetOptions(
    'help|h'       => \$opt_help,
    'list-methods' => \$opt_list_methods,
    'ipv4!'        => \$opt_ipv4,
    'ipv6!'        => \$opt_ipv6,
    'progress|p!'  => \$opt_progress,
    'save=s'       => \$opt_save,
    'strategy|s=s' => \$opt_strategy,
    'timeout|t=i'  => \$opt_timeout,
    'verbose|v+'   => \$opt_verbose,
) or pod2usage( 2 );

pod2usage( 1 ) if $opt_help;

if ( $opt_list_methods ) {
    for my $method ( sort keys %My::DnsMethods::Zone::DNS_METHODS ) {
        say $method;
    }

    exit 0;
}

if ( $opt_strategy !~ /^(bg|fg|restore=.*)$/ ) {
    pod2usage( "invalid --strategy argument" );
}

my $method = shift @ARGV // pod2usage( "METHOD not specified" );
my $domain = shift @ARGV // pod2usage( "DOMAIN not specified" );

if ( !exists $My::DnsMethods::Zone::DNS_METHODS{$method} ) {
    pod2usage( "unrecognized METHOD" );
}

if ( @ARGV ) {
    pod2usage( "too many arguments" );
}

my %request_cache;
my $handler;
if ( $opt_strategy eq 'bg' ) {
    $handler = My::DnsRequest::BackgroundHandler->new( timeout => $opt_timeout );
}
elsif ( $opt_strategy eq 'fg' ) {
    $handler = My::DnsRequest::ForegroundHandler->new( timeout => $opt_timeout );
}
else {
    $handler = My::Streams::DieHandler->new( 'dns-request' );

    my ( undef, $file ) = split qr/=/, $opt_strategy, 2;

    my $text    = read_file( $file );
    my $decoded = decode_cbor( $text );

    %request_cache = $decoded->%*;
}

if ( $opt_progress ) {
    $handler = My::Streams::HandlerProgress->new( $handler );
}

my $diag_stats;
if ( $opt_verbose >= 2 ) {
    $handler = My::DnsRequest::HandlerLogger->new( $handler );
}
if ( $opt_verbose >= 1 ) {
    $handler = My::DnsRequest::HandlerDiagnostics->new( $handler, \$diag_stats );
}

$handler = My::Streams::HandlerCache->new( $handler, \%request_cache );

if ( !$opt_ipv4 || !$opt_ipv6 ) {
    $handler = My::DnsRequest::HandlerFilter->new( $handler, ipv4 => $opt_ipv4, ipv6 => $opt_ipv6 );
}

$begin_time = time();
if ( $opt_verbose ) {
    output( "; starting" );
}

my $stream = My::DnsMethods::Zone->new( child_zone => $domain )    #
  ->dns_method( $method );

eval {
    $stream->traverse( \&output_fields, $handler );
    if ( $opt_verbose ) {
        output( "; done ($diag_stats->{requests} requests)" );
    }
};

my $err = $@;

if ( $opt_save ) {
    my $text = encode_cbor \%request_cache;
    write_file $opt_save, $text;
}

if ( $@ ) {
    die $@;
}

exit 0;

sub Net::DNS::Packet::FREEZE {
    my ( $self, $serialiser ) = @_;

    return $self->encode;
}

sub Net::DNS::Packet::THAW {
    my ( $class, $serialiser, $encoded ) = @_;

    return Net::DNS::Packet->decode( \$encoded );
}

sub Net::DNS::Packet::TO_JSON {
    my ( $self ) = @_;

    return $self->encode;
}

=head1 SYNOPSIS

paramethod --help

    Show usage documentation.

paramethod --list-methods

    List supported methods of examination.

paramethod [OPTIONS] METHOD DOMAIN

    Examine a domain.

=head1 ARGUMENTS

=over 4

=item METHOD

The method of examination. List available methods with --list-methods.

=item DOMAIN

The domain to examine.

=back

=head1 OPTIONS

=over 4

=item --[no]ipv4

Enable/disable using IPv4.
Default: enabled

=item --[no]ipv6

Enable/disable using IPv6.
Default: enabled.

=item -s STRATEGY, --strategy=STRATEGY

Select DNS transaction strategy.
Default: bg

Valid values are C<bg> for concurrently starting multiple transactions, and C<fg> for
blocking to wait for each transaction.

=item -t SECONDS, --timeout SECONDS

Set DNS transaction timeout.
Default: 5

Must be a positive number.

=item -v, --verbose

Include more details in the output.

If specified at least once, timings, progress and statistics summary are included.

If specified at least twice, sent DNS requests are also included.

Default: disabled

=back

=head1 CAVEATS

The current implementation has many notable deficiencies. Here is a non-exhaustive list.

=over 4

=item Blacklisting

Blacklisting is not currently implemented. This is not significant when using the C<bg>
command execution strategy since the timeouts are largely resolved concurrently.

=item Out-of-bailiwick nameserver address lookup

Instead of performing our own lookup of out-of-bailiwick nameserver addresses in a way
that respects root hints, the current implementation is cheating by simply asking Quad9 to
perform a recursive lookup for us.

=item Root hints

=item Fake delegation

=back

=cut
